выходные('Сб').
выходные('Вс').
будние('Пн').
будние('Вт').
будние('Ср').
будние('Чт').
будние('Пт').

%(номер, ФИО, адрес, номер телефона, возраст, место работы)
карта_пациента(1, 'Сартров Эрнест Васильевич', 'ул. Няшинова д. 13' , '+7 999 888 77 66', 19, 'Посольство Испании').
карта_пациента(2, 'Кьеркегеров Тимофей Евгеньевич', 'ул. Няшинова д. 7' , '+7 888 777 66 55', 19, 'Посольство Японии').
карта_пациента(3, 'Джексон Анастасия Сергеевна', 'ул. Новосибирская д. 65' , '+7 777 666 55 44', 20, 'Посольство Китая').
карта_пациента(4, 'Соловьев Егор Дмитриевич', 'ул. Няшинова д. 42' , '+7 666 555 44 33', 23, 'Посольство Германии').
карта_пациента(5, 'Камю Екатерина Алексеевна', 'ул. Даосская д. 4' , '+7 666 555 44 33', 19, 'Весенний Планетарий').

%(номер, ФИО, специализация)
врач(101, 'Тусков Илья Игоревич', 'Невролог').
врач(112, 'Варлоков Михаил Евгеньевич', 'Отоларинголог').

%(врач, пациент, время и дата, диагноз, лечение, больничный)
приём(101, 2, '03.05.2023', 'Болезнь Паркинсона', 'Амантадин', false).
приём(101, 5, '09.04.2023', 'Бессоница', 'Позитивная психотерапия', true).
приём(112, 3, '09.04.2023', 'Хронический насморк', 'Промывание солевыми растворами', false).
приём(101, 2, '03.05.2023', 'Мигрень', 'Пропранолол', false).
приём(112, 4, '29.04.2023', 'Сфеноидит', 'Направление на операцию', true).
приём(112, 1, '14.04.2023', 'Ларингит', 'Тантум Верде', true).

%(врач, с X, до Y)
расписание_приемов(101, 12, 17).
расписание_приемов(112, 11, 15).

лекарство('Амантадин').
лекарство('Пропранолол').
лекарство('Тантум Верде').
метод_лечения('Направление на операцию').
метод_лечения('Промывание солевыми растворами').
метод_лечения('Позитивная психотерапия').

implement main
    open core, stdio

domains
    vault = Rubles; Dollars.

class facts - polyclinicDb
    карта_пациента : (integer PID, string FullNameP, string Address, string Number, integer Age, string Job).
    врач : (integer DID, string FullNameD, string Profile).
    приём : (integer DID, integer PID, string DateP, string Diagnosis, string Treatment, boolean SickDay).
    расписание_приемов : (integer DID, integer Start, integer End).
    лекарство : (string Medicine).
    метод_лечения : (string Method).
    выходные : (string Day).
    будние : (string Day).
    стоимость_приёма : (integer DID, integer PriceP, vault VP).
    стоимость_лекарства : (string Medicine, integer PriceM, vault VM).
    количество_таблеток : (string Medicine, integer Amount).
    время_терапии : (string Method, integer Days).
    стоимость_терапии : (string Method, integer PriceT, vault VT).
    таблетки_в_день : (string Medicine, integer TPD).
    длительность_таблеток : (string Medicine, integer TPD).
    
class facts
    s : (real Sum) single.

clauses
    s(0).
    
class predicates
    расписание_поликлиники : (string Day) nondeterm.
    история_болезней : (string PatientName) nondeterm.
    назначенное_лечение : (string PatientName) nondeterm.
    назначенные_препараты : (string PatientName) nondeterm.
    общий_счёт : (string PatientName) nondeterm. 

clauses
     
    история_болезней(X) :-
        карта_пациента(ID, X, _, _, _, _),
        приём(_, ID, _, Dis, _, _),
        writef("История болезней %:\n", Name),
        writef("\t%\n", Dis),
        fail.
    история_болезней(X) :-
        карта_пациента(, X, _, _, _, _),
        write("Конец списка\n").

    назначенное_лечение(X) :-
        карта_пациента(ID, X, _, _, _, _),
        приём(_, ID, _, _, Heal, _),
        writef("Лечение, назначенное %:\n", Name),
        метод_лечения(Heal),
        writef("\t%\n", Heal),
        fail.
    назначенное_лечение(X) :-
        карта_пациента(, X, _, _, _, _),
        write("Конец списка\n").

    назначенные_препараты(X) :-
        карта_пациента(ID, X, _, _, _, _),
        приём(_, ID, _, _, Heal, _),
        writef("Лечение, назначенное %:\n", Name),
        лекарство(Heal),
        writef("\t%\n", Heal),
        fail.
    назначенные_препараты(X) :-
        карта_пациента(, X, _, _, _, _),
        write("Конец списка\n").

    общий_счёт(X) :-
        карта_пациента(ID, X, _, _, _, _),
        assert(s(0)),
        приём(DID, ID, _, _, Heal, _),
        стоимость_приёма(DID, Price),
        
        (лекарство(Heal) ->
        (
            стоимость_лекарства(Heal, Cost, Vault),
            fail
        )
        ;
        стоимость_терапии(Heal, Cost, Vault)
        ).
        s(Sum),
        assert(s(Sum + Price + Cost)),
        fail.
    общий_счёт(X) :-    
        карта_пациента(_, X, _, _, _, _),
        s(Sum),
        writef("Общий счёт\n", X, Sum),
        nl.
        
    
clauses
    run() :-
        file::consult("kuldb.txt", polyclinicDb),
        fail.

    run() :-
        состав("Тающий картофель"),
        fail.

    run() :-
        исп_пр("Сливочное масло"),
        fail.

    run() :-
        калорийность("Тающий картофель"),
        fail.

    run() :-
        калор_расш("Курица, запеченая с картошкой").

    run().

end implement main

goal
    console::runUtf8(main::run).
